#!/bin/sh
#
# Script to build container image.
#

SCRIPT_DIR=$(cd -- "$(dirname -- "${0}")" && pwd)
. "${SCRIPT_DIR}/inc.functions"

# Default values
BUILDX_BUILDER_NAME=main
DEFAULT_RELEASE=$(grep release= "${SCRIPT_DIR}/../Dockerfile" | cut -d"=" -f2)
DEFAULT_JDK=$(grep jdk= "${SCRIPT_DIR}/../Dockerfile" | cut -d"=" -f2)
DEFAULT_PLATFORMS="linux/amd64,linux/arm64"

# Functions
usage() {
  printf "Usage: %s [OPTIONS]\n" "${0}"
  printf "Options:\n"
  printf "  --release API_LEVEL (default: %s)\n" "${DEFAULT_RELEASE}"
  printf "  --jdk VERSION       (default: %s)\n" "${DEFAULT_JDK}"
  printf "  --platforms         (default: %s)\n" "${DEFAULT_PLATFORMS}"
  printf "  --clean             (optional, clean up build context afterwards)\n"
  printf "  --load              (optional, load local image for Docker daemon)\n"
  printf "  --push              (optional, upload images to Docker Hub)\n"
  exit 1
}

# Command-line arguments
release="${DEFAULT_RELEASE}"
jdk="${DEFAULT_JDK}"
platforms="${DEFAULT_PLATFORMS}"
cmd_clean=
cmd_load=
cmd_push=
while [ $# -gt 0 ]; do
  key="$1"
  case $key in
  --release)
    release="$2"
    shift # past argument
    ;;
  --clean)
    cmd_clean=true
    ;;
  --load)
    cmd_load=true
    ;;
  --jdk)
    jdk="$2"
    shift # past argument
    ;;
  --platforms)
    platforms="$2"
    shift # past argument
    ;;
  --push)
    cmd_push=true
    ;;
  -h | --help)
    usage
    ;;
  *) # unknown option
    ;;
  esac
  shift # past argument or value
done

# Let's roll
image_tag="saschpe/dependency-checker:${release}"

if [ ${cmd_clean} ]; then
  cleanup() {
    if docker buildx ls | grep -q ${BUILDX_BUILDER_NAME}; then
      approve "Remove buildx builder '${BUILDX_BUILDER_NAME}'"
      safe docker buildx rm ${BUILDX_BUILDER_NAME}
    fi
  }
  trap cleanup EXIT
fi

if ! docker buildx ls | grep -q ${BUILDX_BUILDER_NAME}; then
  approve "Create buildx builder '${BUILDX_BUILDER_NAME}'"
  safe docker buildx create --name ${BUILDX_BUILDER_NAME}
fi

if [ ${cmd_load} ]; then
  approve "Build and load image '${image_tag}'"
  buildx_command="--load"
elif [ ${cmd_push} ]; then
  approve "Build and push image '${image_tag}'"
  buildx_command="--platform ${platforms} --push"
else
  approve "Build image '${image_tag}'"
  buildx_command="--platform ${platforms}"
fi

safe docker buildx build \
  ${buildx_command} \
  --builder ${BUILDX_BUILDER_NAME} \
  --build-arg release="${release}" \
  --build-arg jdk="${jdk}" \
  --tag "${image_tag}" \
  .
